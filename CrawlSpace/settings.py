"""
Django settings for CrawlSpace project.

Generated by 'django-admin startproject' using Django 2.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOG_DIR = os.path.dirname(os.path.abspath(__file__))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%heajt$$q7iu1o-a)(m^lddoeci%l^zqg1vjs_d5z67yooy8b@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'simpleui',
    'django_crontab',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "spider",
    "django_apscheduler",
    "crontask",
    "users",
    "analysis",
    "monitor",
    'gunicorn',  # 把gunicorn添加到apps中
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # 压缩
]

ROOT_URLCONF = 'CrawlSpace.urls'
LOGIN_URL = 'accounts/login/'  # 这里配置成你项目登录页面的路由

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins': ['django.templatetags.static'],
        },
    },
]

WSGI_APPLICATION = 'CrawlSpace.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 改为中文

TIME_ZONE = 'Asia/Shanghai'  # 改为上海

USE_I18N = True

USE_L10N = True

USE_TZ = True
# settings.py

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# 通用的静态资源，对应项目根目录下的static
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, './static'),
)
MEDIA_URL = '/media/'
# 静态文件收集
# STATIC_ROOT = os.path.join(BASE_DIR, "/static/")  # 正确
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = os.path.join(BASE_DIR, '../media/')
CORS_ORIGIN_ALLOW_ALL = True

# scrapy项目目录
PROJECTS_FOLDER = "spider/project"
# 规则爬虫项目文件目录
EDIT_FOLDER = "spider/configs"

# crontab
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
CRONJOBS = [
    # 每分钟发送一条通知
    # spiderlinks:为应用名，cron为py文件名，async_data为文件中的函数
    ('*/1 * * * *', 'monitor.cron.async_monitor_spider_status',
     '>> ' + os.path.join(os.path.dirname(BASE_DIR), 'CrawlSpace/logs/crontab.log')),
    ('*/2 * * * *', 'spider.utils.task_status.task_status_info',
     '>> ' + os.path.join(os.path.dirname(BASE_DIR), 'CrawlSpace/logs/task_info.log'))
]
# 日志文件配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False if DEBUG else True,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)s %(message)s'
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(module)s %(funcName)s %(lineno)d %(message)s'
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
        },  # 日志记录级别+时间日期+模块名称+函数名称+行号+记录消息
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'DEBUG' if DEBUG else 'INFO',
            'filters': ['require_debug_true'],  # debug为true才会输出
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'info': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', "info.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,  # 300M大小
            'backupCount': 10,
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'spider': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', "spider.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,  # 300M大小
            'backupCount': 10,
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },

        'crontask': {  # 专门定义一个收集特定信息的日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR + '/logs/', "crontask.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': "utf-8"
        },
        'analysis': {  # 专门定义一个收集特定信息的日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR + '/logs/', "analysis.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': "utf-8"
        },

    },
    'loggers': {  # 日志器
        "django": {  # 默认的logger应用以下配置
            "handlers": ["info", "console"],
            "propagate": True,
            "level": "INFO"
        },
        'crontask_log': {  # 名为 'crontask'的logger还单独处理
            'handlers': ['crontask'],
            "propagate": True,
            'level': 'INFO',
        },
        'analysis_log': {  # 名为 'crontask'的logger还单独处理
            'handlers': ['analysis'],
            "propagate": True,
            'level': 'INFO',
        },
        'spider_log': {  # 名为 'crontask'的logger还单独处理
            'handlers': ['spider'],
            "propagate": True,
            'level': 'INFO',
        },
    }
}

# 邮件
EMAIL_ENABLED = ""  # 是否启用爬虫，默认启用
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 模块
EMAIL_HOST = 'smtp.qq.com'  # 发送方 smtp 服务器地址，这里用的是qq
EMAIL_PORT = "" # 默认 smtp 端口  阿里云587
EMAIL_HOST_USER = ''  # 发送服务器用户名
EMAIL_HOST_PASSWORD = ''  # 授权码
DEFAULT_FROM_EMAIL = ""  # 默认发件人的邮箱
EMAIL_USE_TLS = ""  # 使用tls,SMTP服务器通信时，是否启动TLS链接(安全链接)。
EMAIL_TIMEOUT=30 # 超时
# 邮件通知 配置字段需要使用大写
# SUBJECT = "爬虫管理系统"  # 主题
# FROM_EMAIL = "1737605956@qq.com"  # 发件人
# RECIPIENT_LIST = ["2436549435@qq.com", "1737605956@qq.com"]  # 收件人列表
# INTERVAL_SEND_EMAIL = {'hour': 3}  # 支持hour，minutes，days
# HOST = "http://127.0.0.1:8000"  # 服务器域名
# # 邮件内容模板
# CONTENT = """
#         <!DOCTYPE html>
#         <html lang="en">
#         <head>
#             <meta charset="UTF-8">
#             <title>Title</title>
#         </head>
#         <body>
#         <table>
#             <tr>
#                 <th>主机</th>
#                 <th>项目</th>
#                 <th>爬虫</th>
#                 <th>规则</th>
#                 <th>任务</th>
#                 <th>状态</th>
#                 <th>开始时间</th>
#                 <th>结束时间</th>
#             </tr>
#             <tr>
#             <td>{0}</td>
#             <td>{1}</td>
#             <td>{2}</td>
#             <td>{3}</td>
#             <td>{4}</td>
#             <td>{5}</td>
#             <td>{6}</td>
#             <td>{7}</td>
#         </tr>
#         </table>
#         <p style="font-size:30px;color:red;">爬虫造反啦！管理员快点啊！看看是不是来活了！</p>
#         <p><button style="color:red"><a href="{8}/spider/notification/{4}/2/">不再邮件通知该任务！</a></button></p>
#         </body>
#         </html>
#     """



